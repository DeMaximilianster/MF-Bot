# -*- coding: utf-8 -*-
from presenter.config.database_lib import Database
from presenter.config.config_var import full_chat_list, channel_list, bot_id, admin_place, chat_list
from presenter.config.log import Loger, log_to
from presenter.config.config_func import unban_user, is_suitable
from view.output import kick, reply, promote, send, forward, restrict
import json
from presenter.config.files_paths import systems_file
from time import time

work = True
log = Loger(log_to)

# TODO –∫–æ–º–∞–Ω–¥–∞ /kick, –∫–∏–∫–∞–µ—Ç –∏ —Å—Ä–∞–∑—É —Ä–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç

# TODO –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ–ª–∞–Ω–∏—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º, –≤—ã—Å—à–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º
# TODO –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ–ª–∞–Ω–∏—è –ß–ª–µ–Ω–æ–º –ö–æ–º–∏—Ç–µ—Ç–∞
# TODO —Å–¥–µ–ª–∞—Ç—å —Å–º–µ–Ω—è–µ–º–æ–≥–æ –∑–∞–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–∫–æ–º–∞–Ω–¥–∞ /vice)


def warn(message, person):
    """–î–∞—ë—Ç —É—á–∞—Å—Ç–Ω–∏–∫—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
    log.log_print("warn invoked")
    database = Database()
    if len(message.text.split()) > 1:
        warns = int(message.text.split()[-1])  # TODO –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–≤–∞–∂–¥—ã
    else:
        warns = 1
    if warns == 0:
        reply(message, "–Ø –≤–∞–º –∑–∞–ø—Ä–µ—â–∞—é –¥–µ–ª–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
        return None
    chat = database.get('chats', ('id', message.chat.id))
    system = chat['system']
    value = database.get('members', ('id', person.id), ('system', system))['warns'] + warns
    database.change(value, 'warns', 'members', ('id', person.id), ('system', system))
    reply(message, "–í–∞—Ä–Ω(—ã) –≤—ã–¥–∞–Ω(—ã). –¢–µ–ø–µ—Ä—å –∏—Ö {}".format(value))
    adm_place = admin_place(message, database)
    if adm_place:
        send(adm_place, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} (@{}) [{}] –ø–æ–ª—É—á–∏–ª(–∞) {} –≤–∞—Ä–Ω(–∞) –∏ –∏—Ö —Å—Ç–∞–ª–æ {}".format(
        person.first_name, person.username, person.id, warns, value))
    blowout = database.get('channels', ('name', '–ü—Ä–æ–∫–æ–ª—ã'))['id']
    how_many = 10  # –°–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    end_forwarding = message.reply_to_message.message_id
    start_forwarding = end_forwarding - how_many
    send(blowout, "–í —á–∞—Ç–µ '{}' —Å–ª—É—á–∏–ª–æ—Å—å –Ω–∞—Ä—É—à–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º {} (@{}) [{}]. –ü—Ä—ã—Å—ã–ª–∞—é {} —Å–æ–æ–±—â–µ–Ω–∏–π".
         format(message.chat.title, person.first_name, person.username, person.id, how_many))
    for msg_id in range(start_forwarding, end_forwarding + 1):
        forward(blowout, message.chat.id, msg_id)
    if value >= 3:
        ban(message, person)


def unwarn(message, person):
    """–°–Ω–∏–º–∞–µ—Ç —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
    log.log_print("unwarn invoked")
    database = Database()
    if len(message.text.split()) > 1:
        unwarns = int(message.text.split()[-1])  # TODO –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–≤–∞–∂–¥—ã
    else:
        unwarns = 1
    chat = database.get('chats', ('id', message.chat.id))
    system = chat['system']
    value = database.get('members', ('id', person.id), ('system', system))['warns'] - unwarns
    database.change(value, 'warns', 'members', ('id', person.id), ('system', system))
    adm_place = admin_place(message, database)
    if adm_place:
        send(adm_place, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} (@{}) [{}] –ø–æ–ª—É—á–∏–ª(–∞) {} –≤–∞—Ä–Ω(–∞) –∏ –∏—Ö —Å—Ç–∞–ª–æ {}".format(
        person.first_name, person.username, person.id, unwarns, value))
    reply(message, "–í–∞—Ä–Ω(—ã) —Å–Ω—è—Ç(—ã). –¢–µ–ø–µ—Ä—å –∏—Ö {}".format(value))
    if 3 - unwarns <= value < 3:
        read_file = open(systems_file, 'r', encoding='utf-8')
        data = json.load(read_file)
        read_file.close()
        chat_configs = data[system]
        database.change(chat_configs['ranks'][0], 'rank', 'members', ('id', person.id), ('system', system))


def ban(message, person, comment=True, unban_then=False):
    """–î–∞—ë—Ç —É—á–∞—Å—Ç–Ω–∏–∫—É –±–∞–Ω"""
    log.log_print("ban invoked")
    database = Database()
    blowout = database.get('channels', ('name', '–ü—Ä–æ–∫–æ–ª—ã'))['id']
    how_many = 3  # –°–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    target = message
    if message.reply_to_message:
        target = message.reply_to_message
    end_forwarding = target.message_id
    start_forwarding = end_forwarding - how_many
    send(blowout, "–í —á–∞—Ç–µ '{}' –∑–∞–±–∞–Ω–∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {} (@{}) [{}]. –ü—Ä—ã—Å—ã–ª–∞—é {} —Å–æ–æ–±—â–µ–Ω–∏–π".
         format(message.chat.title, person.first_name, person.username, person.id, how_many))
    for msg_id in range(start_forwarding, end_forwarding + 1):
        forward(blowout, message.chat.id, msg_id)
    if comment:
        send(message.chat.id, "–ù—É –≤—Å—ë, —ç—Ç–æ–º—É —á–µ–ª—É –±–∞–Ω")
    chat = database.get('chats', ('id', message.chat.id))
    system = chat['system']
    read_file = open(systems_file, 'r', encoding='utf-8')
    data = json.load(read_file)
    read_file.close()
    chat_configs = data[system]
    if not unban_then:
        database.change(chat_configs['ranks'][0], 'rank', 'members', ('id', person.id), ('system', system))
    for chat in full_chat_list(database, system):
        kick(chat['id'], person.id)
    for channel in channel_list(database):
        kick(channel['id'], person.id)
    adm_place = admin_place(message, database)
    if adm_place:
        send(adm_place, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} (@{}) [{}] –ø–æ–ª—É—á–∏–ª(–∞) –±–∞–Ω".format(
            person.first_name, person.username, person.id)+', –Ω–æ —Å—Ä–∞–∑—É –∏ —Ä–∞–∑–±–∞–Ω'*unban_then)
    if unban_then:
        unban_user(person)


def mute(message, person):
    """–î–∞—ë—Ç —É—á–∞—Å—Ç–Ω–∏–∫—É –±–∞–Ω"""
    log.log_print("mute invoked")
    database = Database()
    hours = int(message.text.split()[-1])
    chat = database.get('chats', ('id', message.chat.id))
    system = chat['system']
    for chat in full_chat_list(database, system):
        restrict(chat['id'], person.id, until_date=time()+hours*3600)
    adm_place = admin_place(message, database)
    if adm_place:
        send(adm_place, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} (@{}) [{}] –ø–æ–ª—É—á–∏–ª(–∞) –º—É—Ç –Ω–∞ {} —á–∞—Å(–æ–≤)".format(
            person.first_name, person.username, person.id, hours))


def money_pay(message, person):
    """–ü–ª–∞—Ç–∏—Ç —á–µ–ª–æ–≤–µ–∫—É –¥–µ–Ω—å–≥–∏ –∏–∑ –±—é–¥–∂–µ—Ç–∞ —á–∞—Ç–∞"""
    # TODO –î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —á–µ–ª–æ–≤–µ–∫–µ, —Å–æ–≤–µ—Ä—à–∏–≤—à–µ–º –ø–µ—Ä–µ–≤–æ–¥
    # TODO add nice link's to people instead of id's
    log.log_print(f"money pay invoked to person {person.id}")
    database = Database()
    chat = database.get('chats', ('id', message.chat.id))
    system = chat['system']
    bot_money = int(database.get('systems', ('id', system))['money'])
    p_id = person.id
    money = message.text.split()[-1]
    value = database.get('members', ('id', p_id), ('system', system))['money']
    if money == "0":
        reply(message, "–Ø –≤–∞–º –∑–∞–ø—Ä–µ—â–∞—é –¥–µ–ª–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
    elif money[0] == '-':
        money = -int(money)  # –î–µ–ª–∞–µ–º –∏–∑ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
        if value - money >= 0:
            value -= money
            bot_money += money
            sent = send(p_id, f"#–§–∏–Ω–∞–Ω—Å—ã\n\n"
                              f"–° –≤–∞—à–µ–≥–æ —Å—á—ë—Ç–∞ –±—ã–ª–æ —Å–Ω—è—Ç–æ {money} –Ø–ú –≤ —Ñ–æ–Ω–¥ —á–∞—Ç–∞. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {value} –Ø–ú")
            if sent:
                sent = "üîî —É–≤–µ–¥–æ–º–ª—ë–Ω(–∞)"
            else:
                sent = "üîï –Ω–µ —É–≤–µ–¥–æ–º–ª—ë–Ω(–∞)"
            reply(message, f"#–§–∏–Ω–∞–Ω—Å—ã #–ë—é–¥–∂–µ—Ç #–§{p_id}\n\n"
                           f"–ë—é–¥–∂–µ—Ç [{bot_money - money} --> {bot_money}]\n"
                           f"ID {p_id} [{value + money} --> {value}] {sent}")
            send(admin_place(message, database), f"#–§–∏–Ω–∞–Ω—Å—ã #–ë—é–¥–∂–µ—Ç #–§{p_id}\n\n"
                                        f"–ë—é–¥–∂–µ—Ç [{bot_money - money} --> {bot_money}]\n"
                                        f"ID {p_id} [{value + money} --> {value}] {sent}")
        else:
            reply(message, "–ß–∞—Å—Ç–æ —É –ª—é–¥–µ–π –≤–∏–¥–∏—à—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥?")
    else:
        money = int(money)
        if bot_money < money:
            reply(message, "–£ –Ω–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –≤ –±—é–¥–∂–µ—Ç–µ")
        else:
            value += money
            bot_money -= money
            sent = send(p_id, f"#–§–∏–Ω–∞–Ω—Å—ã\n\n"
                              f"–ù–∞ –≤–∞—à —Å—á—ë—Ç –±—ã–ª–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {money} –Ø–ú –∏–∑ —Ñ–æ–Ω–¥–∞ —á–∞—Ç–∞. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {value} –Ø–ú")
            if sent:
                sent = "üîî —É–≤–µ–¥–æ–º–ª—ë–Ω(–∞)"
            else:
                sent = "üîï –Ω–µ —É–≤–µ–¥–æ–º–ª—ë–Ω(–∞)"
            reply(message, f"#–§–∏–Ω–∞–Ω—Å—ã #–ë—é–¥–∂–µ—Ç #–§{p_id}\n\n"
                           f"–ë—é–¥–∂–µ—Ç [{bot_money + money} --> {bot_money}]\n"
                           f"ID {p_id} [{value - money} --> {value}] {sent}")

            send(admin_place(message, database), f"#–§–∏–Ω–∞–Ω—Å—ã #–ë—é–¥–∂–µ—Ç #–§{p_id}\n\n"
                                        f"–ë—é–¥–∂–µ—Ç [{bot_money + money} --> {bot_money}]\n"
                                        f"ID {p_id} [{value - money} --> {value}] {sent}")
    database.change(value, 'money', 'members', ('id', p_id), ('system', system))
    database.change(bot_money, 'money', 'systems', ('id', system))
    # TODO –ó–∞—Å—É–Ω—É—Ç—å —ç—Ç–∏ –∑–∞—Å—Å–∞–Ω—Å–∫–∏–µ —É–µ–±–∞–Ω—Å–∫–∏–µ –¥–µ–Ω–µ–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª—è—Ç—å –º–æ–¥—É–ª—å


def give_admin(message, person, loud=True):
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞ –∞–¥–º–∏–Ω–æ–º"""
    log.log_print("give_admin invoked")
    database = Database()
    chat = database.get('chats', ('id', message.chat.id))
    system = chat['system']
    # TODO –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–ª—è—Ç—å—Å—è –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å
    database.append((person.id, "Admin"), table='appointments')
    # TODO –ø—É—Å—Ç—å –±–æ—Ç —à–ª—ë—Ç –∞–¥–º–∏–Ω—É —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –∞–¥–º–∏–Ω–æ—Å–æ—Å—Ç–∞–≤–∞ –∏ –º–µ–Ω—è–µ—Ç –µ—ë –ø—Ä–∏ –≤—Ö–æ–¥–µ
    # –î–∞—Ç—å —á–µ–ª—É –∞–¥–º–∏–Ω–∫—É –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö, –∫—Ä–æ–º–µ –ö–æ–º–∏—Ç–µ—Ç–∞ –∏ –ê–¥–º–∏–Ω–æ—Å–æ—Å—Ç–∞–≤–∞
    for chat in chat_list(database, system):
        promote(chat['id'], person.id,
                can_change_info=True, can_delete_messages=True, can_invite_users=True,
                can_restrict_members=True, can_pin_messages=True, can_promote_members=False)
    for channel in channel_list(database):
        promote(channel['id'], person.id, can_change_info=True, can_post_messages=True, can_invite_users=True)
    if loud:
        reply(message, "–¢–µ–ø–µ—Ä—å —ç—Ç–æ –∞–¥–º–∏–Ω!")


def del_admin(message, person, loud=True):
    log.log_print("del_admin invoked")
    database = Database()
    chat = database.get('chats', ('id', message.chat.id))
    system = chat['system']
    database.remove("appointments", ("appointment", "Admin"), ("id", person.id))
    for chat in chat_list(database, system):
        promote(chat['id'], person.id,
                can_change_info=False, can_delete_messages=False, can_invite_users=False,
                can_restrict_members=False, can_pin_messages=False, can_promote_members=False)
    for channel in channel_list(database):
        promote(channel['id'], person.id, can_post_messages=False, can_invite_users=False)
    if loud:
        reply(message, "–¢–µ–ø–µ—Ä—å —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω!")


def rank_changer(message, person):
    """Changes person's rank"""
    log.log_print(f"{__name__} invoked")
    database = Database()
    chat = database.get('chats', ('id', message.chat.id))
    system = chat['system']
    read_file = open(systems_file, 'r', encoding='utf-8')
    data = json.load(read_file)
    read_file.close()
    chat_configs = data[str(system)]
    command = message.text.split()[0]
    adm_place = admin_place(message, database)

    if command in chat_configs["ranks_commands"]:
        rank_index = chat_configs["ranks_commands"].index(command)
        rank = chat_configs["ranks"][rank_index]
        database.change(rank, "rank", 'members', ('id', person.id), ('system', system))
        reply(message, f"–¢–µ–ø–µ—Ä—å —ç—Ç–æ {rank} –ø–æ –∑–≤–∞–Ω–∏—é!")
        if adm_place:
            send(adm_place, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} (@{}) [{}] –ø–æ–ª—É—á–∏–ª(–∞) –∑–≤–∞–Ω–∏–µ {}".format(
                person.first_name, person.username, person.id, rank))
    elif command in chat_configs["appointment_adders"]:
        appointment_index = chat_configs["appointment_adders"].index(command)
        appointment = chat_configs["appointments"][appointment_index]
        database.append((person.id, system, appointment), "appointments")
        reply(message, f"–¢–µ–ø–µ—Ä—å —ç—Ç–æ {appointment}. –ü–æ–∑–¥—Ä–∞–≤–∏–º —á–µ–ª–æ–≤–µ–∫–∞ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å!")
        if adm_place:
            send(adm_place, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} (@{}) [{}] –ø–æ–ª—É—á–∏–ª(–∞) –¥–æ–ª–∂–Ω–æ—Å—Ç—å {}".format(
                person.first_name, person.username, person.id, appointment))
    elif command in chat_configs["appointment_removers"]:
        appointment_index = chat_configs["appointment_removers"].index(command)
        appointment = chat_configs["appointments"][appointment_index]
        database.remove("appointments", ('id', person.id), ('system', system), ('appointment', appointment))
        reply(message, f"–¢–µ–ø–µ—Ä—å —ç—Ç–æ –Ω–µ {appointment}")
        if adm_place:
            send(adm_place, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} (@{}) [{}] –ø–æ—Ç–µ—Ä—è–ª(–∞) –¥–æ–ª–∂–Ω–æ—Å—Ç—å {}".format(
                person.first_name, person.username, person.id, appointment))
    unban_user(person)
    if is_suitable(message, person, 'boss', loud=False):
        give_admin(message, person, loud=False)
    else:
        del_admin(message, person, loud=False)


def message_change(message, person):
    """–ú–µ–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ë–î –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ–ª–∞"""
    log.log_print(f"message_change invoked to person {person.id}")
    database = Database()
    p_id = person.id
    ch_id = message.chat.id
    messages = message.text.split()[-1]
    value = int(messages)
    reply(message, "–°—Ç–∞–≤–ª—é —á–µ–ª–æ–≤–µ–∫—É —Å ID {} –≤ —á–∞—Ç —Å ID {} –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–≤–Ω–æ–µ {}".format(p_id, ch_id, value))
    if not database.get('messages', ('person_id', p_id), ('chat_id', ch_id)):
        database.append((p_id, ch_id, value), 'messages')
    else:
        database.change(value, 'messages', 'messages', ('person_id', p_id), ('chat_id', ch_id))


def deleter_mode(message):
    """–£–¥–∞–ª—è—Ç—å –º–µ–¥–∏–∞ –∏–ª–∏ –Ω–µ—Ç"""
    log.log_print("deleter_mode invoked")
    database = Database()
    delete = int(database.get('config', ('var', 'delete'))['value'])
    delete = (delete + 1) % 2  # –ü–µ—Ä–µ–≤–æ–¥–∏—Ç 0 –≤ 1, –∞ 1 –≤ 0
    database.change(delete, 'value', 'config', ('var', 'delete'))

    if delete:
        reply(message, '–û–∫–µ–π, –≥–æ—Å–ø–æ–¥–∏–Ω, —Ç–µ–ø–µ—Ä—å —è –±—É–¥—É —É–¥–∞–ª—è—Ç—å –º–µ–¥–∏–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å–ª–∞–Ω—ã –≥–æ—Å—Ç—è–º–∏')
    else:
        reply(message, '–û–∫–µ–π, –≥–æ—Å—Ç–∏ –º–æ–≥—É—Ç —Å–ø–æ–∫–æ–π–Ω–æ–π —Å–ª–∞—Ç—å —Å–≤–æ–∏ –º–µ–¥–∏–∞')


def add_chat(message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —á–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤, –≤—Ö–æ–¥—è—â–∏—Ö –≤ —Å–∏—Å—Ç–µ–º—É –ú–§2"""
    # TODO –ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —á–∞—Ç–æ–≤
    log.log_print("add_chat invoked")
    database = Database()
    system = None
    message_words = message.text.split()
    if len(message_words) == 2:
        system = message_words[-1]
    typee = 'private'
    link = 'None'
    if message.chat.username:
        typee = 'public'
        link = message.chat.username
    if database.get('chats', ('id', message.chat.id)):
        reply(message, "–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω")
    elif system:
        if database.get('systems', ('id', system)):  # Adding new chat to existing system
            if database.get('members', ('id', message.from_user.id), ('system', system)):
                if is_suitable(message, message.from_user, "chat_changer", system=system):
                    chat = (message.chat.id, system, message.chat.title, typee, link, 2, 2, 2, 2, 2, 2, 2)
                    database.append(chat, 'chats')
                    reply(message, "–¢–µ–ø–µ—Ä—å —è –∑–¥–µ—Å—å —Ä–∞–±–æ—Ç–∞—é!")
            else:
                reply(message, "–£ –≤–∞—Å –≤ —ç—Ç–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –ø–æ–ª–Ω–æ–º–æ—á–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤ –≤ –Ω–µ—ë)")
        else:
            reply(message, "–¢–∞–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    elif message.from_user.id in [381279599]:  # Creating new system if adder is an MF diplomate
        all_systems = database.get_all('systems', 'id')
        ids = [int(sys['id']) for sys in all_systems]
        new_id = str(max(ids) + 1)
        database.append((message.chat.id, new_id, message.chat.title, typee, link, 2, 2, 2, 2, 2, 2, 2), 'chats')
        database.append((new_id, 0, 0, 0, 1, 0, 0, 2, 1, 1), 'systems')
        read_file = open(systems_file, 'r', encoding='utf-8')
        data = json.load(read_file)
        read_file.close()
        data[new_id] = {"name": message.chat.title, "money": False,
                        "ranks": ["–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–π", "–£—á–∞—Å—Ç–Ω–∏–∫", "–ê–¥–º–∏–Ω", "–°—Ç–∞—Ä—à–∏–π –ê–¥–º–∏–Ω", "–õ–∏–¥–µ—Ä"],
                        "ranks_commands": [None, "/guest", "/admin", "/senior_admin", "/leader"],
                        "appointments": [],
                        "appointment_adders": [],
                        "appointment_removers": [],
                        "commands": {"standart": ["–£—á–∞—Å—Ç–Ω–∏–∫", "–õ–∏–¥–µ—Ä"],
                                     "advanced": ["–£—á–∞—Å—Ç–Ω–∏–∫", "–õ–∏–¥–µ—Ä"],
                                     "boss": ["–ê–¥–º–∏–Ω", "–õ–∏–¥–µ—Ä"],
                                     "uber": ["–°—Ç–∞—Ä—à–∏–π –ê–¥–º–∏–Ω", "–õ–∏–¥–µ—Ä"],
                                     "chat_changer": ["–õ–∏–¥–µ—Ä", "–õ–∏–¥–µ—Ä"]}}
        write_file = open(systems_file, 'w', encoding='utf-8')
        json.dump(data, write_file, indent=4, ensure_ascii=False)
        write_file.close()
        reply(message, "–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —á–∞—Ç–æ–≤ —Å ID {}".format(new_id))
    else:
        reply(message, "–î–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à—É –≤—ã–∑–≤–∞—Ç—å @DeMaximilianster")


def add_admin_place(message):
    """Add admin place to system"""
    log.log_print("add_admin_place invoked")
    database = Database()
    chat = database.get('chats', ('id', message.chat.id))
    if chat:
        system = chat["system"]
        database.change(message.chat.id, "admin_place", "systems", ('id', system))
        reply(message, "–¢–µ–ø–µ—Ä—å —ç—Ç–æ —á–∞—Ç –∞–¥–º–∏–Ω–æ–≤. –Ø —Å—é–¥–∞ –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")


def chat_options(message):
    """Optimize current chat"""
    log.log_print("chat_options invoked")
    database = Database()
    text = message.text.split(sep='@')[0]
    last_word = text.split(sep='_')[-1]
    if last_word == 'default':
        mode = 2
        text = text[1:-8]
    elif last_word == 'on':
        mode = 1
        text = text[1:-3]
    else:  # last_word == 'off'
        mode = 0
        text = text[1:-4]
    database.change(mode, text, 'chats', ('id', message.chat.id))
    reply(message, "–û–ö!")


def database_changer():
    database = Database()
    members = database.get_all('members')
    for member in members:
        database.change(1, 'system', 'members', ('id', member['id']))


# TODO –ö–æ–º–∞–Ω–¥–∞ /add_channel
# TODO –ö–æ–º–∞–Ω–¥–∞ /del_chat
# TODO –ö–æ–º–∞–Ω–¥–∞ /del_channel
