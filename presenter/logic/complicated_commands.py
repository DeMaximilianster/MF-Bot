"""Commands which involve creating and pushing buttons"""
# -*- coding: utf-8 -*-
from time import time
from ast import literal_eval
from telebot.types import InlineQueryResultArticle, InputTextMessageContent, InlineKeyboardButton, \
    InlineKeyboardMarkup
from view.output import edit_markup, answer_inline, reply, \
    answer_callback, edit_text, delete, send, restrict
from presenter.config.config_func import update_adapt_vote, update_multi_vote, create_adapt_vote, \
    create_vote, create_multi_vote, CAPTCHERS, kick_and_unban
import presenter.config.config_func as cf
from presenter.config.config_var import TEST_KEYBOARD, IRONIC_KEYBOARD, \
    VOTE_KEYBOARD, admin_place
from presenter.config.database_lib import Database
from presenter.config.files_paths import MULTI_VOTES_FILE, ADAPT_VOTES_FILE, VOTES_FILE
from presenter.config.log import Logger, LOG_TO


LOG = Logger(LOG_TO)
WORK = True


@LOG.wrap
def create_new_chat(call):
    """Add new system of chats"""
    database = Database()
    chat_type, link = cf.get_chat_type_and_chat_link(call.message.chat)
    all_systems = database.get_all('systems', 'id')
    ids = [int(sys['id']) for sys in all_systems]
    new_id = str(max(ids) + 1)
    cf.create_chat(call.message, new_id, chat_type, link, database)
    cf.create_system(call.message, new_id, database)
    edit_text("–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —á–∞—Ç–æ–≤ —Å ID {}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /chat –∏ /help "
              "–¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥".format(new_id),
              call.message.chat.id, call.message.message_id)


@LOG.wrap
def captcha_completed(call):
    """Bot reacts to someone clicked correct button"""
    if CAPTCHERS.remove_captcher(call.from_user.id, call.message.chat.id):
        restrict(call.message.chat.id,
                 call.from_user.id,
                 can_send_messages=True,
                 can_send_other_messages=True,
                 can_send_media_messages=True,
                 can_send_polls=True,
                 can_add_web_page_previews=True)
        answer_callback(call.id, text='–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –∫—Ä–µ–≤–µ—Ç–∫–æ–π –ø—Ä–æ–π–¥–µ–Ω–æ!')
        edit_markup(call.message.chat.id, call.message.message_id)
    else:
        answer_callback(call.id, text='–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∫—Ä–µ–≤–µ—Ç–∫–∞ üëÄ')


@LOG.wrap
def captcha_failed(call):
    """Bot reacts to someone clicked wrong button"""
    if CAPTCHERS.remove_captcher(call.from_user.id, call.message.chat.id):
        kick_and_unban(call.message.chat.id, call.from_user.id)
        answer_callback(call.id)
        edit_text("–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –∫—Ä–µ–≤–µ—Ç–∫–æ–π –ø—Ä–æ–≤–∞–ª–µ–Ω–æ! (–Ω–∞–∂–∞—Ç–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–Ω–æ–ø–∫–∞)", call.message.chat.id,
                  call.message.message_id)
    else:
        answer_callback(call.id, text='–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∂–∏–≤–æ—Ç–∏–Ω–∫–∞ üëÄ')


@LOG.wrap
def adequate(call):
    """–í–∞—Ä–∏–∞–Ω—Ç –∞–¥–µ–∫–≤–∞—Ç–µ–Ω"""
    file_place = None
    if call.data == 'adequate':
        file_place = MULTI_VOTES_FILE
    elif call.data == 'a_adequate':
        file_place = ADAPT_VOTES_FILE
    file = open(file_place, encoding='utf-8')
    votes_shelve = literal_eval(file.read())
    info = literal_eval(call.message.text)
    vote_id = info[0]
    votey = votes_shelve[vote_id]  # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –Ω–∞–º –≥–æ–ª–æ—Å–æ–≤–∞—à–∫—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    votey["keyboard"].append(info[1])
    votey["votes"].append([info[1], {}])  # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç
    votes_shelve[vote_id] = votey
    with open(file_place, 'w', encoding='utf-8') as file:
        file.write(str(votes_shelve))
    if call.data == 'adequate':
        update_multi_vote(vote_id)
    elif call.data == 'a_adequate':
        update_adapt_vote(vote_id)
    edit_markup(call.message.chat.id, call.message.message_id)


@LOG.wrap
def inadequate(call):
    """–í–∞—Ä–∏–∞–Ω—Ç –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–µ–Ω"""
    edit_markup(call.message.chat.id, call.message.message_id)


@LOG.wrap
def response(inline_query):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∏–Ω–ª–∞–π–Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞, –±–µ—Å–ø–æ–ª–µ–∑–Ω–∞—è"""
    results = [
        InlineQueryResultArticle('1',
                                 '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫',
                                 InputTextMessageContent("–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç"),
                                 reply_markup=TEST_KEYBOARD)
    ]
    answer_inline(inline_query.id, results=results, cache_time=1)


@LOG.wrap
def insult(message):
    """–°–ø—Ä–∞—â–∏–≤–∞–µ—Ç, –∏—Ä–æ–Ω–∏—á–Ω–æ –ª–∏ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ–º"""
    text = "–ò—Ä–æ–Ω–∏—á–Ω–æ? \n\n(–í —Å–ª—É—á–∞–µ –Ω–∞–∂–∞—Ç–∏—è '–ù–µ–∏—Ä–æ–Ω–∏—á–Ω–æ' –≤ –∞–¥–º–∏–Ω–æ—Å–æ—Å—Ç–∞–≤ –±—É–¥–µ—Ç –ø–æ—Å–ª–∞–Ω–∞ –∂–∞–ª–æ–±–∞. " \
           "–ë—É–¥—å—Ç–µ –¥–æ–±—Ä—ã –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–Ω–∞–ª–æ–º –∂–∞–ª–æ–±, –µ—Å–ª–∏ –≤–∞—Å –Ω–µ –æ—Å–∫–æ—Ä–±–∏–ª–∏)"
    reply(message, text, reply_markup=IRONIC_KEYBOARD)


@LOG.wrap
def non_ironic(call):
    """–†–µ–∞–∫—Ü–∏—è, –µ—Å–ª–∏ –æ–±–≤–∏–Ω–µ–Ω–∏–µ –±—ã–ª–æ –Ω–µ–∏—Ä–æ–Ω–∏—á–Ω—ã–º"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞–∂–∞–ª –ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–µ —Ç–æ—Ç, –∫—Ç–æ –Ω—É–∂–µ–Ω
    edit_text("–ù–µ–∏—Ä–æ–Ω–∏—á–Ω–æ!", call.message.chat.id, call.message.message_id)
    send(admin_place(call.message, Database()),
         "–ü—Ä–æ–∏–∑–æ—à–ª–æ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ! " + "[–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç](t.me/{}/{})".format(
             call.message.reply_to_message.chat.username, call.message.reply_to_message.message_id),
         parse_mode="Markdown")
    answer_callback(call.id)


@LOG.wrap
def ironic(call):
    """–†–µ–∞–∫—Ü–∏—è, –µ—Å–ª–∏ –æ–±–≤–∏–Ω–µ–Ω–∏–µ –±—ã–ª–æ –∏—Ä–æ–Ω–∏—á–Ω—ã–º"""
    edit_text("–ò—Ä–æ–Ω–∏—á–Ω–æ, —Ç–∞–∫ –∏—Ä–æ–Ω–∏—á–Ω–æ", call.message.chat.id, call.message.message_id)
    answer_callback(call.id)


@LOG.wrap
def place_here(call):
    """–í—ã–±–∏—Ä–∞–µ—Ç, –∫—É–¥–∞ –ø—Ä–∏—Å–ª–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞—à–∫—É"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞–∂–∞–ª –ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–µ —Ç–æ—Ç, –∫—Ç–æ –Ω—É–∂–µ–Ω
    where = None
    if call.data == 'here' or call.data == 'm_here' or call.data == 'a_here':
        where = call.message.chat.id
    elif call.data == 'there' or call.data == 'm_there' or call.data == 'a_there':
        where = -1001260953849  # –ö–∞–Ω–∞–ª –≥–æ–ª–æ—Å–æ–≤–∞—à–µ–∫
    elif 'nedostream' in call.data:
        where = -1001409685984  # –ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—Ä–∏–º–æ–≤
    if call.message.reply_to_message.text.split()[0] == '/vote':
        vote_message = send(where,
                            '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ "{}"'.format(call.message.reply_to_message.text[6:]),
                            reply_markup=VOTE_KEYBOARD)
        create_vote(vote_message)
    elif call.message.reply_to_message.text.split()[0] == '/multi_vote':
        answer = '–ú—É–ª—å—Ç–∏-–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ (–≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã ' \
                 '–∏ –≤—ã–±–∏—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤)\n\n"{}"\n'
        vote_message = send(where, answer.format(call.message.reply_to_message.text[12:]))
        create_multi_vote(vote_message)
    elif call.message.reply_to_message.text.split()[0] == '/adapt_vote':
        answer = '–ê–¥–∞–ø—Ç-–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ (–≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã, ' \
                 '–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 –≤–∞—Ä–∏–∞–Ω—Ç)\n\n"{}"\n'
        vote_message = send(where, answer.format(call.message.reply_to_message.text[12:]))
        create_adapt_vote(vote_message)
    delete(call.message.chat.id, call.message.message_id)


@LOG.wrap
def multi_vote(call):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –º—É–ª—å—Ç–∏-–≥–æ–ª–æ—Å–æ–≤–∞—à–∫—É"""
    user = call.from_user
    user_username = user.username  # —é–∑–µ—Ä–Ω–µ–π–º –∂–º–∞–∫–Ω—É–≤—à–µ–≥–æ —á–µ–ª–∏–∫–∞
    user_nickname = user.first_name
    user_id = user.id
    msg_id = call.message.message_id  # –ê–π –¥–∏ –∂–º–∞–∫–Ω—É—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    # –ö–∞–∫ —ç—Ç–æ—Ç —á–µ–ª–∏–∫ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    link = f'<a href="t.me/{user_username}">{user_nickname}</a>'
    which = int(call.data[-1])  # –ì–¥–µ –º–µ–Ω—è—Ç—å –º–Ω–µ–Ω–∏–µ
    with open(MULTI_VOTES_FILE, encoding='utf-8') as file:
        votes_shelve = literal_eval(file.read())
    votey = votes_shelve[msg_id]  # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –Ω–∞–º –≥–æ–ª–æ—Å–æ–≤–∞—à–∫—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

    if user_id in votey['votes'][which][1].keys():
        # –ß–µ–ª–∏–∫ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å –µ–≥–æ –º–Ω–µ–Ω–∏–µ
        # —É–¥–∞–ª—è–µ–º —á–µ–ª–∏–∫–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        votey['votes'][which][1].pop(user_id)
    else:
        # –µ—Å–ª–∏ —á–µ–¥–∏–∫–∞ –Ω–µ—Ç—É - —Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
        votey['votes'][which][1].update([(user_id, link)])
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    votes_shelve[msg_id] = votey
    with open(MULTI_VOTES_FILE, 'w', encoding='utf-8') as file:
        file.write(str(votes_shelve))
    answer_callback(call.id, text="–ñ–º–∞–∫ —É—á—Ç—ë–Ω!")
    update_multi_vote(call.message.message_id)


@LOG.wrap
def adapt_vote(call):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–¥–∞–ø—Ç-–≥–æ–ª–æ—Å–æ–≤–∞—à–∫—É"""
    user = call.from_user
    user_username = user.username  # —é–∑–µ—Ä–Ω–µ–π–º –∂–º–∞–∫–Ω—É–≤—à–µ–≥–æ —á–µ–ª–∏–∫–∞
    user_nickname = user.first_name
    user_id = user.id
    msg_id = call.message.message_id  # –ê–π –¥–∏ –∂–º–∞–∫–Ω—É—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    # –ö–∞–∫ —ç—Ç–æ—Ç —á–µ–ª–∏–∫ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    link = f'<a href="t.me/{user_username}">{user_nickname}</a>'
    which = int(call.data[-1])  # –ì–¥–µ –º–µ–Ω—è—Ç—å –º–Ω–µ–Ω–∏–µ
    with open(ADAPT_VOTES_FILE, encoding='utf-8') as file:
        votes_shelve = literal_eval(file.read())
    votey = votes_shelve[msg_id]  # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –Ω–∞–º –≥–æ–ª–æ—Å–æ–≤–∞—à–∫—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

    if msg_id in votes_shelve.keys():
        if user_id in votey['votes'][which][1].keys(
        ):  # –ß–µ–ª–∏–∫ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å –µ–≥–æ –º–Ω–µ–Ω–∏–µ
            # —É–¥–∞–ª—è–µ–º —á–µ–ª–∏–∫–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            votey['votes'][which][1].pop(user_id)
        else:
            for i in votey['votes']:
                i[1].pop(user_id, None)
            # –µ—Å–ª–∏ —á–µ–¥–∏–∫–∞ –Ω–µ—Ç—É - —Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
            votey['votes'][which][1].update([(user_id, link)])
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    votes_shelve[msg_id] = votey
    with open(ADAPT_VOTES_FILE, 'w', encoding='utf-8') as file:
        file.write(str(votes_shelve))
    answer_callback(call.id, text="–ñ–º–∞–∫ —É—á—Ç—ë–Ω!")
    update_adapt_vote(call.message.message_id)


@LOG.wrap
def add_vote(call):
    """–í—Å—Ç–∞–≤–ª—è–µ—Ç –≥–æ–ª–æ—Å –≤ –≥–æ–ª–æ—Å–æ–æ–≤–∞—à–∫—É"""
    reply_markup = VOTE_KEYBOARD
    text = ''
    user = call.from_user
    user_username = user.username  # —é–∑–µ—Ä–Ω–µ–π–º –∂–º–∞–∫–Ω—É–≤—à–µ–≥–æ —á–µ–ª–∏–∫–∞
    user_nickname = user.first_name
    user_id = user.id
    msg_id = call.message.message_id  # –ê–π –¥–∏ –∂–º–∞–∫–Ω—É—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    # –ö–∞–∫ —ç—Ç–æ—Ç —á–µ–ª–∏–∫ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    link = f'<a href="t.me/{user_username}">{user_nickname}</a>'
    with open(VOTES_FILE, 'r', encoding='utf-8') as file:
        votes_shelve = literal_eval(file.read())

    if msg_id in votes_shelve.keys():
        votey = votes_shelve[msg_id]  # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –Ω–∞–º –≥–æ–ª–æ—Å–æ–≤–∞—à–∫—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if time() - votey['time'] > 86400 and len(votey['favor']) != len(
                votey['against']):  # —ç—Ç–æ —Å—É—Ç–∫–∏
            reply_markup = None
            text += '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ. –ù–æ–≤—ã–µ –≥–æ–ª–æ—Å–∞ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è\n\n'
        # Person clicked a button containing their opinion
        elif user_id in votey[call.data].keys():
            # —É–¥–∞–ª—è–µ–º —á–µ–ª–∏–∫–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            votey[call.data].pop(user_id)
        else:
            # –ß–∏—Å—Ç–∏–º –ø—Ä–æ—à–ª—ã–µ –º–Ω–µ–Ω–∏—è —á–µ–ª–∏–∫–∞ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ
            votey['favor'].pop(user_id, None)
            votey['against'].pop(user_id, None)
            votey['abstain'].pop(user_id, None)
            votey[call.data].update([(user_id, link)])
        votes_shelve[msg_id] = votey
        text += votey["text"]
        text += '\n–ó–∞: ' + ', '.join(votey["favor"].values())
        text += '\n–ü—Ä–æ—Ç–∏–≤: ' + ', '.join(votey["against"].values())
        text += '\n–í–æ–∑–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ—Å—è: ' + ', '.join(votey["abstain"].values())
    else:
        reply_markup = None
        text += '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ –ø–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ–Ω–∞—Ö–æ–¥–∞ –∑–∞–ø–∏—Å–∏ –æ–± —ç—Ç–æ–π –≥–æ–ª–æ—Å–æ–≤–∞—à–∫–∏. ' \
                '–ù–æ–≤—ã–µ –≥–æ–ª–æ—Å–∞ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è\n\n'
        text += call.message.text
    with open(VOTES_FILE, 'w', encoding='utf-8') as file:
        file.write(str(votes_shelve))
    edit_text(text=text,
              chat_id=call.message.chat.id,
              message_id=call.message.message_id,
              reply_markup=reply_markup,
              parse_mode="HTML")
    answer_callback(call.id, text="–ñ–º–∞–∫ —É—á—Ç—ë–Ω!")


@LOG.wrap
def vote(message):
    """Create poll"""
    where_keyboard = InlineKeyboardMarkup()
    where_keyboard.row_width = 1
    where_keyboard.add(InlineKeyboardButton("–°—é–¥–∞", callback_data="here"))
    reply(message, "–ê –∑–∞–ø–æ—Å—Ç–∏—Ç—å –∫—É–¥–∞?", reply_markup=where_keyboard)
