# -*- coding: utf-8 -*-
from presenter.config.database_lib import Database
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from presenter.config.files_paths import adapt_votes_file, multi_votes_file, votes_file
from view.output import *
from presenter.config.log import Loger
from presenter.config.config_var import roles, bot_id
from presenter.config.log import log_to
from random import choice

log = Loger(log_to)


def int_check(string, positive):
    if positive:
        if set(string) & set('0123456789') == set(string):
            return int(string)
        else:
            return None
    elif set(string[1:]) & set('0123456789') == set(string[1:]) and string[0] in '-0123456789':
        return int(string)
    else:
        return None


def language_analyzer(message, only_one):
    log.log_print(f"{__name__} invoked")
    database = Database()
    entry = database.get('languages', ('id', message.chat.id))
    languages = {"Russian": False, "English": False}
    del database
    if entry:
        if only_one:
            return entry['language']
        else:
            languages[entry['language']] = True
            return languages
    else:
        russian = set("—ë–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é–Å–ô–¶–£–ö–ï–ù–ì–®–©–ó–•–™–§–´–í–ê–ü–†–û–õ–î–ñ–≠–Ø–ß–°–ú–ò–¢–¨–ë–Æ")
        english = set("qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM")
        text = message.text
        if message.chat.id > 0:
            user = message.from_user
            text += user.first_name
            if user.last_name:
                text += user.last_name
        else:
            chat = get_chat(message.chat.id)
            if chat.title:
                text += chat.title
            if chat.description:
                text += chat.description
    text = set(text)
    languages['Russian'] = bool(russian & text) | (message.from_user.language_code == 'ru')
    languages['English'] = bool(english & text) | (message.from_user.language_code == 'en')
    count = 0
    language_answer = None
    for language in languages.keys():
        if languages[language]:
            count += 1
            language_answer = languages[language]
    if only_one and count == 1:
        return language_answer
    elif only_one:
        answer = ''
        if languages['Russian']:
            answer += "–ï—Å–ª–∏ –≤—ã –≥–æ–≤–æ—Ä–∏—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –Ω–∞–ø–∏—à–∏—Ç–µ '/lang –†—É—Å—Å–∫–∏–π'\n\n"
        if languages['English']:
            answer += "If you speak English, type '/lang English'\n\n"
        reply(message, answer)
        return None
    else:
        return languages


def case_analyzer(word, language):
    if language == 'Russian':
        if word[-1] == '—å':
            return word[:-1] + '–µ'
        else:
            return word + '–µ'
    else:
        return word


def shuffle(old_list):
    """–ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –∫–æ—Ä—Ç–µ–∂"""
    log.log_print("shuffle invoked")
    old_list = list(old_list)
    new_list = []
    while old_list:
        element = choice(old_list)
        new_list.append(element)
        old_list.remove(element)
    return new_list


def person_analyze(message, to_self=False, to_bot=False):
    log.log_print("person_analyze invoked")
    if message.reply_to_message:  # –°–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º
        if message.reply_to_message.new_chat_members:
            person = message.reply_to_message.new_chat_members[0]
        else:
            person = message.reply_to_message.from_user
    elif len(message.text.split()) > 1:
        par = message.text.split()[1]
        if par.isdigit() and 7 <= len(par) <= 10:
            person = get_member(-1001408293838, par)
            if person:
                person = person.user
            else:
                reply(message, "–ù–µ –≤–∏–∂—É —Ç–∞–∫–æ–≥–æ ID")
                return None
        else:
            reply(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. ID —ç—Ç–æ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –æ—Ç 7 –¥–æ 10 —Ü–∏—Ñ—Ä")
            return None
    elif to_self:
        return message.from_user
    else:
        reply(message, "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –µ–≥–æ ID")
        return None
    if person.id == message.from_user.id and not to_self:
        reply(message, "–Ø –≤–∞–º –∑–∞–ø—Ä–µ—â–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–∞–º–æ–º —Å–µ–±–µ")
        return None
    elif person.id == bot_id and not to_bot:
        reply(message, "–Ø –≤–∞–º –∑–∞–ø—Ä–µ—â–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ –º–Ω–µ")
        return None
    else:
        return person


def rank_superiority(message, person):
    log.log_print("rank superiority invoked")
    database = Database()
    your_rank = database.get('members', ('id', message.from_user.id))['rank']
    their_rank = database.get('members', ('id', person.id))['rank']
    del database
    your_rank_n = roles.index(your_rank)
    their_rank_n = roles.index(their_rank)
    if their_rank_n >= your_rank_n:
        reply(message, "–î–ª—è —ç—Ç–æ–≥–æ –≤–∞—à–µ –∑–≤–∞–Ω–∏–µ ({}) –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç—å –∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ ({})".format(your_rank, their_rank))
        return False
    else:
        return True


def rank_required(message, min_rank, loud=True):
    log.log_print("rank_required invoked from userID {}".format(message.from_user.id))
    database = Database()
    your_rank = database.get('members', ('id', message.from_user.id))['rank']
    your_rank_n = roles.index(your_rank)
    min_rank_n = roles.index(min_rank)

    if your_rank_n < min_rank_n and loud:
        if type(message) == CallbackQuery:
            answer_callback(message.id,
                            "–í–∞—à–µ –∑–≤–∞–Ω–∏–µ ({}) –Ω–µ –¥–æ—Ç—è–≥–∏–≤–∞–µ—Ç –¥–æ –∑–≤–∞–Ω–∏—è ({}) –¥–ª—è –≥–æ–ª–æ—Å–∞"
                            .format(your_rank, min_rank), show_alert=True)
        else:
            reply(message, "–í–∞—à–µ –∑–≤–∞–Ω–∏–µ ({}) –Ω–µ –¥–æ—Ç—è–≥–∏–≤–∞–µ—Ç –¥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ ({}) –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"
                  .format(your_rank, min_rank))
    return your_rank_n >= min_rank_n


def appointment_required(message, appointment, loud=True):
    log.log_print(f"{__name__} invoked")
    database = Database()
    true_false = database.get("appointments", ('id', message.from_user.id), ('appointment', appointment))
    if not true_false and loud:
        reply(message, "–í–∞–º –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å {}".format(appointment))
    del database
    return true_false


def cooldown(message, command, timeout=3600):
    log.log_print("cooldown invoked")
    if message.chat.id > 0:  # Command is used in PM's
        return True
    database = Database()
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∫–æ–º–∞–Ω–¥—ã
    entry = database.get('cooldown', ('person_id', message.from_user.id), ('command', command),
                         ('chat_id', message.chat.id))
    if not entry:  # –ß–µ–ª –≤–ø–µ—Ä–≤—ã–µ –ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–º–º–∞–Ω–¥–æ–π
        database.append((message.from_user.id, command, message.chat.id, message.date), 'cooldown')
        del database
        return True
    # –ß–µ–ª —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–æ–º–∞–Ω–¥–æ–π
    time_passed = message.date - entry['time']
    if time_passed < timeout:  # –ö—É–ª–¥–∞—É–Ω –Ω–µ –ø—Ä–æ—à—ë–ª
        seconds = timeout - time_passed
        minutes = seconds // 60
        seconds %= 60
        answer = "–í–æ—É, –ø—Ä–∏–¥–µ—Ä–∂–∏ –∫–æ–Ω–µ–π, –∫–æ–≤–±–æ–π. –¢—ã —Å–º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π —Ç–æ–ª—å–∫–æ "
        answer += "—á–µ—Ä–µ–∑ {} –º–∏–Ω—É—Ç –∏ {} —Å–µ–∫—É–Ω–¥ ü§†".format(minutes, seconds)
        reply(message, answer)
        del database
        return False
    else:  # –ö—É–ª–¥–∞—É–Ω –ø—Ä–æ—à—ë–ª
        database.change(message.date, 'time', 'cooldown', ('person_id', message.from_user.id), ('command', command),
                        ('chat_id', message.chat.id))
        del database
        return True


def time_replace(seconds):
    seconds += 3 * 60 * 60
    minutes = seconds // 60
    seconds %= 60
    hours = minutes // 60
    minutes %= 60
    days = hours // 60
    hours %= 24
    return days, hours, minutes, seconds


def in_mf(message, command_type, or_private=True, loud=True):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–ª –≤–Ω–µ —á–∞—Ç–æ–≤ –∏ –≤ –ª–∏—á–∫–µ"""
    log.log_print("in_mf invoked")
    database = Database()
    if message.new_chat_members:
        person = message.new_chat_members[0]
    elif message.left_chat_member:
        person = message.left_chat_member
    else:
        person = message.from_user
    if not database.get('members', ('id', person.id)):
        database.append((person.id, person.username, person.first_name, 'Guest', 0, 0, 0, 0, 0), 'members')
    if message.chat.id > 0:
        if loud and not or_private:
            person = message.from_user
            send(381279599, "–ù–µ–∫—Ç–æ {} ({}) [{}] –ø–æ–ø—ã—Ç–∞–ªc—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É {} –≤ –ª–∏—á–∫–µ"
                 .format(person.first_name, person.username, person.id, message.text))
            reply(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –õ–°")
        return or_private
    if not database.get('chats', ('id', message.chat.id)) and \
            get_member(message.chat.id, database.get('members', ('rank', 'Leader'))['id']).status in ['member',
                                                                                                      'administrator',
                                                                                                      'creator']:
        typee = 'private'
        link = 'None'
        if message.chat.username:
            typee = 'public'
            link = message.chat.username
        database.append((message.chat.id, message.chat.title, 'None', typee, link, 2, 0, 0, 0, 0, 0, 0), 'chats')
    if command_type:
        chat = database.get('chats', ('id', message.chat.id), (command_type, 2))
    else:
        chat = database.get('chats', ('id', message.chat.id))
    if chat:  # –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –ú–§2
        counter(message)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —É—á—ë—Ç –≤ –ë–î
        return True
    if loud:
        text = "–ñ–∞–ª–∫–∏–µ –∑–∞–≤–∏—Å—Ç–Ω–∏–∫–∏ –∏–∑ —á–∞—Ç–∞ —Å ID {} –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º {}, –≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏ {} (@{}) [{}] "
        text += "–ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –º–Ω–æ–π –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"
        send(381279599, text.format(message.chat.id, message.chat.title, message.from_user.first_name,
                                    message.from_user.username, message.from_user.id))
        rep_text = ""
        if command_type:
            rep_text += "I'm sorry, but I don't support here types like {}. ".format(command_type)
            rep_text += "Call @DeMaximilianster for help\n\n"
            rep_text += "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ —è –Ω–µ –∑–¥–µ—Å—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –∫–æ–º–∞–Ω–¥—ã –≤–∏–¥–∞ {}. ".format(command_type)
            rep_text += "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @DeMaximilianster –∑–∞ –ø–æ–º–æ—â—å—é\n\n"
        else:
            rep_text += "Hmm, I don't know this chat. Call @DeMaximilianster for help\n\n"
            rep_text += "–•–º–º, —è –Ω–µ –∑–Ω–∞—é —ç—Ç–æ—Ç —á–∞—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @DeMaximilianster –∑–∞ –ø–æ–º–æ—â—å—é\n\n"
        reply(message, rep_text)
    return False


def counter(message):
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —á–µ–ª–æ–º"""
    log.log_print("counter invoked")
    database = Database()
    if message.new_chat_members:
        person = message.new_chat_members[0]
    elif message.left_chat_member:
        person = message.left_chat_member
    else:
        person = message.from_user
    if not database.get('messages', ('person_id', person.id), ('chat_id', message.chat.id)):
        database.append((person.id, message.chat.id, 0), 'messages')
    value = database.get('messages', ('person_id', person.id), ('chat_id', message.chat.id))['messages'] + 1
    database.change(value, 'messages', 'messages', ('person_id', person.id), ('chat_id', message.chat.id))
    # TODO –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —ç–ª–∏—Ç–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∏–º
    del database


def member_update(person):
    database = Database()
    chats_ids = [x['id'] for x in database.get_many('chats', ('messages_count', 2))]
    msg_count = 0
    for chat_id in chats_ids:
        if database.get('messages', ('person_id', person.id), ('chat_id', chat_id)):
            msg_count += database.get('messages', ('person_id', person.id), ('chat_id', chat_id))['messages']
    database.change(person.username, 'username', 'members', ('id', person.id))
    database.change(person.first_name, 'nickname', 'members', ('id', person.id))
    database.change(msg_count, 'messages', 'members', ('id', person.id))


# TODO –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å–µ –≥–æ–ª–æ—Å–æ–≤–∞—à–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –µ—â—ë –∫—É–¥–∞-—Ç–æ (JSON)
def create_vote(vote_message):
    """–°–æ–∑–¥–∞—ë—Ç –≥–æ–ª–æ—Å–æ–≤–∞—à–∫—É"""
    log.log_print("create_vote invoked")
    # TODO –ü–∞—Ä–∞–º–µ—Ç—Ä purpose, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞—à–∫–∏
    file = open(votes_file, 'r', encoding='utf-8')
    votes_shelve = file.read()
    if votes_shelve:
        votes_shelve = eval(votes_shelve)
    else:
        votes_shelve = {}
    file.close()
    votes_shelve[vote_message.message_id] = {"time": vote_message.date, "text": vote_message.text,
                                             "favor": {}, "against": {}, "abstain": {}}
    file = open(votes_file, 'w', encoding='utf-8')
    file.write(str(votes_shelve))
    file.close()


def create_multi_vote(vote_message):
    """–°–æ–∑–¥–∞—ë—Ç –º—É–ª—å—Ç–∏-–≥–æ–ª–æ—Å–æ–≤–∞—à–∫—É"""
    log.log_print("create_multi_vote invoked")
    keyboard = InlineKeyboardMarkup()
    url = 'https://t.me/multifandomrubot?start=new_option{}'.format(vote_message.message_id)
    keyboard.row_width = 1
    keyboard.add(InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç", url=url))
    file = open(multi_votes_file, encoding='utf-8')
    votes_shelve = file.read()
    if votes_shelve:
        votes_shelve = eval(votes_shelve)
    else:
        votes_shelve = {}
    file.close()
    votes_shelve[vote_message.message_id] = {"text": vote_message.text, "votes": [], "keyboard": [],
                                             "chat": vote_message.chat.id}
    file = open(multi_votes_file, 'w', encoding='utf-8')
    file.write(str(votes_shelve))
    file.close()
    edit_markup(vote_message.chat.id, vote_message.message_id, reply_markup=keyboard)


def create_adapt_vote(vote_message):
    """–°–æ–∑–¥–∞—ë—Ç –∞–¥–∞–ø—Ç-–≥–æ–ª–æ—Å–æ–≤–∞—à–∫—É"""
    log.log_print("create_adapt_vote invoked")
    keyboard = InlineKeyboardMarkup()
    url = 'https://t.me/multifandomrubot?start=new_adapt_option{}'.format(vote_message.message_id)
    keyboard.row_width = 1
    keyboard.add(InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç", url=url))
    file = open(adapt_votes_file, encoding='utf-8')
    votes_shelve = file.read()
    if votes_shelve:
        votes_shelve = eval(votes_shelve)
    else:
        votes_shelve = {}
    file.close()
    votes_shelve[vote_message.message_id] = {"text": vote_message.text, "votes": [], "keyboard": [],
                                             "chat": vote_message.chat.id}
    file = open(adapt_votes_file, 'w', encoding='utf-8')
    file.write(str(votes_shelve))
    file.close()
    edit_markup(vote_message.chat.id, vote_message.message_id, reply_markup=keyboard)


def update_multi_vote(vote_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –º—É–ª—å—Ç–∏-–≥–æ–ª–æ—Å–æ–≤–∞—à–∫—É"""
    log.log_print("update_multi_vote invoked")
    file = open(multi_votes_file, encoding='utf-8')
    votes_shelve = file.read()
    if votes_shelve:
        votes_shelve = eval(votes_shelve)
    else:
        votes_shelve = {}
    file.close()
    votey = dict(votes_shelve[vote_id])
    keyboard = InlineKeyboardMarkup()
    url = 'https://t.me/multifandomrubot?start=new_option{}'.format(vote_id)
    keyboard.row_width = 1
    keyboard.add(InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç", url=url))
    for i in votey['keyboard']:
        keyboard.add(InlineKeyboardButton(i, callback_data='mv_' + str(votey['keyboard'].index(i))))
    # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≥–æ–ª–æ—Å–æ–≤–∞—à–∫–∏
    text = votey["text"]
    for i in votey['votes']:
        text += '\n{}: '.format(i[0]) + ', '.join(i[1].values())
    try:
        edit_text(text=text, chat_id=votey['chat'], message_id=vote_id, reply_markup=keyboard, parse_mode="Markdown")
    except Exception as e:
        print(e)


def update_adapt_vote(vote_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–¥–∞–ø—Ç –≥–æ–ª–æ—Å–æ–≤–∞—à–∫—É"""
    log.log_print("update_adapt_vote")
    file = open(adapt_votes_file, encoding='utf-8')
    votes_shelve = file.read()
    if votes_shelve:
        votes_shelve = eval(votes_shelve)
    else:
        votes_shelve = {}
    file.close()
    votey = dict(votes_shelve[vote_id])
    keyboard = InlineKeyboardMarkup()
    url = 'https://t.me/multifandomrubot?start=new_adapt_option{}'.format(vote_id)
    keyboard.row_width = 1
    keyboard.add(InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç", url=url))
    for i in votey['keyboard']:
        keyboard.add(InlineKeyboardButton(i, callback_data='av_' + str(votey['keyboard'].index(i))))
    # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≥–æ–ª–æ—Å–æ–≤–∞—à–∫–∏
    text = votey["text"]
    for i in votey['votes']:
        text += '\n{}: '.format(i[0]) + ', '.join(i[1].values())
    try:
        edit_text(text=text, chat_id=votey['chat'], message_id=vote_id, reply_markup=keyboard, parse_mode="Markdown")
    except Exception as e:
        print(e)


def unban_user(person):
    """Remove ban from user"""
    log.log_print(f"{__name__} invoked")
    database = Database()
    chats_to_unban = database.get_many('chats', ('violators_ban', 2))
    for chat in chats_to_unban:
        if get_member(chat['id'], person.id).status in ('left', 'kicked'):
            unban(chat['id'], person.id)
