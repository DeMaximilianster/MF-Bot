# -*- coding: utf-8 -*-
from presenter.config.database_lib import Database
from presenter.config.config_var import full_chat_list, channel_list, bot_id, admin_place, chat_list
from presenter.config.log import Loger, log_to
from presenter.config.config_func import unban_user
from view.output import kick, reply, promote, send, forward

work = True
log = Loger(log_to)

# TODO –∫–æ–º–∞–Ω–¥–∞ /kick, –∫–∏–∫–∞–µ—Ç –∏ —Å—Ä–∞–∑—É —Ä–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç

# TODO –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ–ª–∞–Ω–∏—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º, –≤—ã—Å—à–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º
# TODO –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ–ª–∞–Ω–∏—è –ß–ª–µ–Ω–æ–º –ö–æ–º–∏—Ç–µ—Ç–∞
# TODO —Å–¥–µ–ª–∞—Ç—å —Å–º–µ–Ω—è–µ–º–æ–≥–æ –∑–∞–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–∫–æ–º–∞–Ω–¥–∞ /vice)

"""
def chat_search(message):
    reply(message, "–ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é")
    # i = -1001250000000
    i = "@trachDeMax"
    while True:
        chat = get_chat(i)
        if chat:
            if chat.username:
                send(message.chat.id, chat.username)
                break
            else:
                send(message.chat.id, "–ù–∞—à—ë–ª —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É, –Ω–æ –æ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è")
        elif i % 100 == 0:
            send(message.chat.id, "–î–æ—Å—Ç–∏–≥ –æ—Ç–º–µ—Ç–∫–∏ –≤ {}".format(i))
        i -= 1
"""


def warn(message, person):
    """–î–∞—ë—Ç —É—á–∞—Å—Ç–Ω–∏–∫—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
    log.log_print("warn invoked")
    database = Database()
    if len(message.text.split()) > 1:
        warns = int(message.text.split()[-1])  # TODO –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–≤–∞–∂–¥—ã
    else:
        warns = 1
    if warns == 0:
        reply(message, "–Ø –≤–∞–º –∑–∞–ø—Ä–µ—â–∞—é –¥–µ–ª–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
        return None
    value = database.get('members', ('id', person.id))['warns'] + warns
    database.change(value, 'warns', 'members', ('id', person.id))
    reply(message, "–í–∞—Ä–Ω(—ã) –≤—ã–¥–∞–Ω(—ã). –¢–µ–ø–µ—Ä—å –∏—Ö {}".format(value))
    blowout = database.get('channels', ('name', '–ü—Ä–æ–∫–æ–ª—ã'))['id']
    how_many = 20  # –°–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    end_forwarding = message.reply_to_message.message_id
    start_forwarding = end_forwarding - how_many
    send(blowout, "–í —á–∞—Ç–µ '{}' —Å–ª—É—á–∏–ª–æ—Å—å –Ω–∞—Ä—É—à–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º {} (@{}) [{}]. –ü—Ä—ã—Å—ã–ª–∞—é {} —Å–æ–æ–±—â–µ–Ω–∏–π".
         format(message.chat.title, person.first_name, person.username, person.id, how_many))
    for msg_id in range(start_forwarding, end_forwarding + 1):
        forward(blowout, message.chat.id, msg_id)
    if value >= 3:
        ban(message, person)


def unwarn(message, person):
    """–°–Ω–∏–º–∞–µ—Ç —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
    log.log_print("unwarn invoked")
    database = Database()
    if len(message.text.split()) > 1:
        unwarns = int(message.text.split()[-1])  # TODO –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–≤–∞–∂–¥—ã
    else:
        unwarns = 1
    if unwarns == 0:
        reply(message, "–Ø –≤–∞–º –∑–∞–ø—Ä–µ—â–∞—é –¥–µ–ª–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
        return None
    value = database.get('members', ('id', person.id))['warns'] - unwarns
    database.change(value, 'warns', 'members', ('id', person.id))
    reply(message, "–í–∞—Ä–Ω(—ã) —Å–Ω—è—Ç(—ã). –¢–µ–ø–µ—Ä—å –∏—Ö {}".format(value))
    if value < 3:
        set_guest(message, person)


def ban(message, person):
    """–î–∞—ë—Ç —É—á–∞—Å—Ç–Ω–∏–∫—É –±–∞–Ω"""
    log.log_print("ban invoked")
    database = Database()
    blowout = database.get('channels', ('name', '–ü—Ä–æ–∫–æ–ª—ã'))['id']
    how_many = 10  # –°–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    target = message
    if message.reply_to_message:
        target = message.reply_to_message
    end_forwarding = target.message_id
    start_forwarding = end_forwarding - how_many
    send(blowout, "–í —á–∞—Ç–µ '{}' –∑–∞–±–∞–Ω–∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {} (@{}) [{}]. –ü—Ä—ã—Å—ã–ª–∞—é {} —Å–æ–æ–±—â–µ–Ω–∏–π".
         format(message.chat.title, person.first_name, person.username, person.id, how_many))
    for msg_id in range(start_forwarding, end_forwarding + 1):
        forward(blowout, message.chat.id, msg_id)
    send(message.chat.id, "–ù—É –≤—Å—ë, —ç—Ç–æ–º—É —á–µ–ª–∏–∫—É –∂–æ–ø–∞")
    database.change('Violator', 'rank', 'members', ('id', person.id))
    for chat in full_chat_list(database):
        kick(chat['id'], person.id)
    for channel in channel_list(database):
        kick(channel['id'], person.id)


def money_pay(message, person):
    """–ü–ª–∞—Ç–∏—Ç —á–µ–ª–æ–≤–µ–∫—É –¥–µ–Ω—å–≥–∏ –∏–∑ –±—é–¥–∂–µ—Ç–∞ —á–∞—Ç–∞"""
    # TODO –î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —á–µ–ª–æ–≤–µ–∫–µ, —Å–æ–≤–µ—Ä—à–∏–≤—à–µ–º –ø–µ—Ä–µ–≤–æ–¥
    # TODO add nice link's to people instead of id's
    log.log_print(f"money pay invoked to person {person.id}")
    database = Database()
    bot_money = database.get('members', ('id', bot_id))['money']
    p_id = person.id
    money = message.text.split()[-1]
    value = database.get('members', ('id', p_id))['money']
    if money == "0":
        reply(message, "–Ø –≤–∞–º –∑–∞–ø—Ä–µ—â–∞—é –¥–µ–ª–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
    elif money[0] == '-':
        money = -int(money)  # –î–µ–ª–∞–µ–º –∏–∑ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
        if value - money >= 0:
            value -= money
            bot_money += money
            sent = send(p_id, f"#–§–∏–Ω–∞–Ω—Å—ã\n\n"
                              f"–° –≤–∞—à–µ–≥–æ —Å—á—ë—Ç–∞ –±—ã–ª–æ —Å–Ω—è—Ç–æ {money} –Ø–ú –≤ —Ñ–æ–Ω–¥ —á–∞—Ç–∞. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {value} –Ø–ú")
            if sent:
                sent = "üîî —É–≤–µ–¥–æ–º–ª—ë–Ω(–∞)"
            else:
                sent = "üîï –Ω–µ —É–≤–µ–¥–æ–º–ª—ë–Ω(–∞)"
            reply(message, f"#–§–∏–Ω–∞–Ω—Å—ã #–ë—é–¥–∂–µ—Ç #–§{p_id}\n\n"
                           f"–ë—é–¥–∂–µ—Ç [{bot_money - money} --> {bot_money}]\n"
                           f"ID {p_id} [{value + money} --> {value}] {sent}")
            send(admin_place(database), f"#–§–∏–Ω–∞–Ω—Å—ã #–ë—é–¥–∂–µ—Ç #–§{p_id}\n\n"
                                        f"–ë—é–¥–∂–µ—Ç [{bot_money - money} --> {bot_money}]\n"
                                        f"ID {p_id} [{value + money} --> {value}] {sent}")
        else:
            reply(message, "–ß–∞—Å—Ç–æ —É –ª—é–¥–µ–π –≤–∏–¥–∏—à—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥?")
    else:
        money = int(money)
        if bot_money < money:
            reply(message, "–£ –Ω–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –≤ –±—é–¥–∂–µ—Ç–µ")
        else:
            value += money
            bot_money -= money
            sent = send(p_id, f"#–§–∏–Ω–∞–Ω—Å—ã\n\n"
                              f"–ù–∞ –≤–∞—à —Å—á—ë—Ç –±—ã–ª–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {money} –Ø–ú –∏–∑ —Ñ–æ–Ω–¥–∞ —á–∞—Ç–∞. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {value} –Ø–ú")
            if sent:
                sent = "üîî —É–≤–µ–¥–æ–º–ª—ë–Ω(–∞)"
            else:
                sent = "üîï –Ω–µ —É–≤–µ–¥–æ–º–ª—ë–Ω(–∞)"
            reply(message, f"#–§–∏–Ω–∞–Ω—Å—ã #–ë—é–¥–∂–µ—Ç #–§{p_id}\n\n"
                           f"–ë—é–¥–∂–µ—Ç [{bot_money + money} --> {bot_money}]\n"
                           f"ID {p_id} [{value - money} --> {value}] {sent}")

            send(admin_place(database), f"#–§–∏–Ω–∞–Ω—Å—ã #–ë—é–¥–∂–µ—Ç #–§{p_id}\n\n"
                                        f"–ë—é–¥–∂–µ—Ç [{bot_money + money} --> {bot_money}]\n"
                                        f"ID {p_id} [{value - money} --> {value}] {sent}")
    database.change(value, 'money', 'members', ('id', p_id))
    database.change(bot_money, 'money', 'members', ('id', bot_id))


def give_admin(message, person):
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞ –∞–¥–º–∏–Ω–æ–º"""
    log.log_print(f"{__name__} invoked")
    database = Database()
    # TODO –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–ª—è—Ç—å—Å—è –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å
    database.append((person.id, "Admin"), table='appointments')
    # TODO –ø—É—Å—Ç—å –±–æ—Ç —à–ª—ë—Ç –∞–¥–º–∏–Ω—É —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –∞–¥–º–∏–Ω–æ—Å–æ—Å—Ç–∞–≤–∞ –∏ –º–µ–Ω—è–µ—Ç –µ—ë –ø—Ä–∏ –≤—Ö–æ–¥–µ
    # –î–∞—Ç—å —á–µ–ª—É –∞–¥–º–∏–Ω–∫—É –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö, –∫—Ä–æ–º–µ –ö–æ–º–∏—Ç–µ—Ç–∞ –∏ –ê–¥–º–∏–Ω–æ—Å–æ—Å—Ç–∞–≤–∞
    for chat in chat_list(database):
        promote(chat['id'], person.id,
                can_change_info=True, can_delete_messages=True, can_invite_users=True,
                can_restrict_members=True, can_pin_messages=True, can_promote_members=False)
    for channel in channel_list(database):
        print(channel)
        promote(channel['id'], person.id, can_change_info=True, can_post_messages=True, can_invite_users=True)
    reply(message, "–¢–µ–ø–µ—Ä—å —ç—Ç–æ –∞–¥–º–∏–Ω!")


def del_admin(message, person):
    log.log_print(f"{__name__} invoked")
    database = Database()
    database.remove("appointments", ("appointment", "Admin"), ("id", person.id))
    for chat in chat_list(database):
        promote(chat['id'], person.id,
                can_change_info=False, can_delete_messages=False, can_invite_users=False,
                can_restrict_members=False, can_pin_messages=False, can_promote_members=False)
    for channel in channel_list(database):
        promote(channel['id'], person.id, can_post_messages=False, can_invite_users=False)
    reply(message, "–¢–µ–ø–µ—Ä—å —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω!")


def set_guest(message, person):
    """Sets person's rank to guest"""
    log.log_print(f"{__name__} invoked")
    database = Database()
    database.change("Guest", "rank", 'members', ('id', person.id))
    unban_user(person)
    del_admin(message, person)
    reply(message, "–¢–µ–ø–µ—Ä—å —ç—Ç–æ –≥–æ—Å—Ç—å!")


def set_citizen(message, person):
    """Sets person's rank to citizen"""
    log.log_print(f"{__name__} invoked")
    database = Database()
    database.change("Citizen", "rank", 'members', ('id', person.id))
    unban_user(person)
    del_admin(message, person)
    reply(message, "–¢–µ–ø–µ—Ä—å —ç—Ç–æ –≥–æ—Å—Ç—å!")


def message_change(message, person):
    """–ú–µ–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ë–î –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ–ª–∞"""
    log.log_print(f"message_change invoked to person {person.id}")
    database = Database()
    p_id = person.id
    ch_id = message.chat.id
    messages = message.text.split()[-1]
    value = int(messages)
    reply(message, "–°—Ç–∞–≤–ª—é —á–µ–ª–æ–≤–µ–∫—É —Å ID {} –≤ —á–∞—Ç —Å ID {} –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–≤–Ω–æ–µ {}".format(p_id, ch_id, value))
    if not database.get('messages', ('person_id', p_id), ('chat_id', ch_id)):
        database.append((p_id, ch_id, value), 'messages')
    else:
        database.change(value, 'messages', 'messages', ('person_id', p_id), ('chat_id', ch_id))


def deleter_mode(message):
    """–£–¥–∞–ª—è—Ç—å –º–µ–¥–∏–∞ –∏–ª–∏ –Ω–µ—Ç"""
    log.log_print("deleter_mode invoked")
    database = Database()
    delete = int(database.get('config', ('var', 'delete'))['value'])
    delete = (delete + 1) % 2  # –ü–µ—Ä–µ–≤–æ–¥–∏—Ç 0 –≤ 1, –∞ 1 –≤ 0
    database.change(delete, 'value', 'config', ('var', 'delete'))

    if delete:
        reply(message, '–û–∫–µ–π, –≥–æ—Å–ø–æ–¥–∏–Ω, —Ç–µ–ø–µ—Ä—å —è –±—É–¥—É —É–¥–∞–ª—è—Ç—å –º–µ–¥–∏–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å–ª–∞–Ω—ã –≥–æ—Å—Ç—è–º–∏')
    else:
        reply(message, '–û–∫–µ–π, –≥–æ—Å—Ç–∏ –º–æ–≥—É—Ç —Å–ø–æ–∫–æ–π–Ω–æ–π —Å–ª–∞—Ç—å —Å–≤–æ–∏ –º–µ–¥–∏–∞')


def add_chat(message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —á–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤, –≤—Ö–æ–¥—è—â–∏—Ö –≤ —Å–∏—Å—Ç–µ–º—É –ú–§2"""
    # TODO –ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –Ω–∞ purpose —á–∞—Ç–∞
    # TODO –ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —á–∞—Ç–æ–≤
    log.log_print("add_chat invoked")
    database = Database()
    typee = 'private'
    link = 'None'
    if message.chat.username:
        typee = 'public'
        link = message.chat.username
    database.append((message.chat.id, message.chat.title, message.text[10:], typee, link, 2, 0, 0, 0, 0, 0, 0), 'chats')
    reply(message, "–¢–µ–ø–µ—Ä—å —ç—Ç–æ —á–∞—Å—Ç—å –ú–§2. –ö–∞–∫ –∏:\n" + '\n'.join(map(str, full_chat_list(database))))


'''
def database_changer():
    database = Database()
    rank_shifter = {"–ù–∞—Ä—É—à–∏—Ç–µ–ª—å": 'Violator',
                    "–ì–æ—Å—Ç—å": 'Guest',
                    "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω": 'Citizen',
                    "–í—ã—Å—à–∏–π –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω": 'Senior Citizen',
                    "–ß–ª–µ–Ω –ö–æ–º–∏—Ç–µ—Ç–∞": 'The Committee Member',
                    "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å": 'Deputy',
                    "–õ–∏–¥–µ—Ä": 'Leader'}
    members = database.get_all('members')
    for member in members:
        rank = member[3]
        if rank not in rank_shifter.values():
            rank = rank_shifter[rank]
            database.change(rank, 'rank', 'members', ('id', member[0]))
    
'''

# TODO –ö–æ–º–∞–Ω–¥–∞ /add_channel
# TODO –ö–æ–º–∞–Ω–¥–∞ /del_chat
# TODO –ö–æ–º–∞–Ω–¥–∞ /del_channel
